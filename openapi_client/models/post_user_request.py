# coding: utf-8

"""
    user-service

    User Management Service

    The version of the OpenAPI document: 0.03
    Contact: overparser@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, constr, validator
from openapi_client.models.user_preferences import UserPreferences

class PostUserRequest(BaseModel):
    """
    PostUserRequest
    """
    user_id: Optional[StrictStr] = None
    telegram_login: Optional[StrictStr] = None
    telegram_id: StrictInt = Field(...)
    registration_date: Optional[datetime] = None
    username: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    last_updated: Optional[datetime] = None
    default_repeats: Optional[conlist(constr(strict=True), max_items=15, min_items=1)] = None
    preferences: Optional[UserPreferences] = None
    last_update: Optional[datetime] = None
    __properties = ["user_id", "telegram_login", "telegram_id", "registration_date", "username", "status", "last_updated", "default_repeats", "preferences", "last_update"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('active', 'suspended', 'banned',):
            raise ValueError("must be one of enum values ('active', 'suspended', 'banned')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PostUserRequest:
        """Create an instance of PostUserRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "registration_date",
                            "last_update",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of preferences
        if self.preferences:
            _dict['preferences'] = self.preferences.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PostUserRequest:
        """Create an instance of PostUserRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PostUserRequest.parse_obj(obj)

        _obj = PostUserRequest.parse_obj({
            "user_id": obj.get("user_id"),
            "telegram_login": obj.get("telegram_login"),
            "telegram_id": obj.get("telegram_id"),
            "registration_date": obj.get("registration_date"),
            "username": obj.get("username"),
            "status": obj.get("status"),
            "last_updated": obj.get("last_updated"),
            "default_repeats": obj.get("default_repeats"),
            "preferences": UserPreferences.from_dict(obj.get("preferences")) if obj.get("preferences") is not None else None,
            "last_update": obj.get("last_update")
        })
        return _obj


